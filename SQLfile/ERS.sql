DROP TABLE IF EXISTS ERS_REIMBURSEMENT CASCADE;
DROP TABLE IF EXISTS ERS_REIMBURSEMENT_STATUS CASCADE;
DROP TABLE IF EXISTS ERS_REIMBURSEMENT_TYPE CASCADE;
DROP TABLE IF EXISTS ERS_REIMBURSMENT CASCADE;
DROP TABLE IF EXISTS ERS_REIMBURSMENT_STATUS CASCADE;
DROP TABLE IF EXISTS ERS_REIMBURSMENT_TYPE CASCADE;
DROP TABLE IF EXISTS ERS_USERS CASCADE;
DROP TABLE IF EXISTS ERS_USER_ROLES CASCADE;

CREATE TABLE ERS_REIMBURSMENT_STATUS (REIMB_STATUS_ID SERIAL CONSTRAINT REIMB_STATUS_PK PRIMARY KEY,
  REIMB_STATUS VARCHAR(10));

CREATE TABLE ERS_REIMBURSMENT_TYPE (REIMB_TYPE_ID SERIAL CONSTRAINT REIMB_TYPE_PK PRIMARY KEY,
  REIMB_TYPE VARCHAR(10));

CREATE TABLE ERS_USER_ROLES (ERS_USER_ROLE_ID SERIAL CONSTRAINT ERS_USER_ROLES_PK PRIMARY KEY,
  USER_ROLE VARCHAR(10));

CREATE TABLE ERS_USERS (ERS_USERS_ID SERIAL CONSTRAINT ERS_USERS_PK PRIMARY KEY,
  ERS_USERNAME VARCHAR(50) UNIQUE, ERS_PASSWORD VARCHAR(200), USER_FIRST_NAME VARCHAR(100),
  USER_LAST_NAME VARCHAR(100), USER_EMAIL VARCHAR(150) UNIQUE, USER_ROLE_ID INTEGER,
  CONSTRAINT USER_ROLES_FK FOREIGN KEY(USER_ROLE_ID) REFERENCES ERS_USER_ROLES(ERS_USER_ROLE_ID) ON DELETE SET NULL);

CREATE TABLE ERS_REIMBURSMENT (REIMB_ID SERIAL CONSTRAINT ERS_REIMBURSMENT_PK PRIMARY KEY,
  REIMB_AMOUNT INTEGER, REIMB_SUBMITTED TIMESTAMP DEFAULT CURRENT_TIMESTAMP, REIMB_RESOLVED TIMESTAMP, REIMB_DESCRIPTION VARCHAR(250),
  REIMB_RECEIPT BOOLEAN, REIMB_AUTHOR INTEGER, REIMB_RESOLVER INTEGER, REIMB_STATUS_ID INTEGER, REIMB_TYPE_ID INTEGER,
  CONSTRAINT ERS_USERS_FK_AUTH FOREIGN KEY(REIMB_AUTHOR) REFERENCES ERS_USERS(ERS_USERS_ID) ON DELETE SET NULL,
  CONSTRAINT ERS_USERS_FK_RESLVR FOREIGN KEY(REIMB_RESOLVER) REFERENCES ERS_USERS(ERS_USERS_ID) ON DELETE SET NULL,
  CONSTRAINT ERS_REIMBURSMENT_STATUS_FK FOREIGN KEY(REIMB_STATUS_ID) REFERENCES ERS_REIMBURSMENT_STATUS(REIMB_STATUS_ID) ON DELETE SET NULL,
  CONSTRAINT ERS_REIMBURSMENT_TYPE_FK FOREIGN KEY(REIMB_TYPE_ID) REFERENCES ERS_REIMBURSMENT_TYPE(REIMB_TYPE_ID) ON DELETE SET NULL);

-- Add Types, Status, Roles
 
INSERT INTO ERS_REIMBURSMENT_TYPE(REIMB_TYPE) VALUES ('lodging'), ('travel'), ('food'), ('other');
 
INSERT INTO ERS_REIMBURSMENT_STATUS(REIMB_STATUS) VALUES ('pending'), ('approved'), ('denied');

INSERT INTO ERS_USER_ROLES(USER_ROLE) VALUES ('Employee'), ('Manager');

-- Add manager users and testing data

INSERT INTO ERS_USERS(ERS_USERNAME, ERS_PASSWORD, USER_FIRST_NAME, USER_LAST_NAME, USER_ROLE_ID) VALUES ('admin', 'ae8eeac54d9e4f6871072611c630d3ef:d1c458714c745916ee396f67532c7ea5604a1299dd2851eb49ff307906e4cd9992cfa8a21b0e504f53c1ec7f87d467d9c8793c7527e5894529f1f0bd549c036a', 'admin', 'admin', 2), ('hong', '9d91e125aa37b185dc83e20681f581b2:c8a97d797ceab31414506018ac3f656408447fe3f8f31b7e95926daa3feec4d70669a76806cac6809107434bdb691e0ae7405e0a0fd674725762910cd05ab9cd', 'hong', 'wu', 1);

INSERT INTO ERS_REIMBURSMENT (REIMB_AMOUNT, REIMB_RESOLVED, REIMB_DESCRIPTION, REIMB_RECEIPT, REIMB_AUTHOR, REIMB_RESOLVER, REIMB_STATUS_ID, REIMB_TYPE_ID)
  VALUES (10000, CURRENT_TIMESTAMP, 'blar', FALSE, 2, 1, 1, 1), (20000, CURRENT_TIMESTAMP, 'blur', FALSE, 2, 1, 2, 3);

-- Trigger 
 
CREATE OR REPLACE FUNCTION user_role_trigger() RETURNS TRIGGER AS 
$BODY$
BEGIN 
	NEW.USER_ROLE_ID := 1;
	RETURN NEW;
END
$BODY$
language plpgsql;

CREATE TRIGGER user_role_trg BEFORE INSERT ON ERS_USERS 
	FOR EACH ROW EXECUTE PROCEDURE user_role_trigger();
